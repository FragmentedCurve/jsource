name: JE

# on:
# - push

on:
 push:
  branches:
   - '**'

# trigger workflow on file change
#on:
# push:
#  paths:
#   - 'version.txt'

jobs:
 jengine:
  name: JE
  runs-on: ${{ matrix.os }}

  strategy:
   matrix:
    os: [ubuntu-22.04, ubuntu-20.04, macos-12, windows-2022]
    #os: [ubuntu-22.04]
    #os: [macos-12]
    #os: [windows-2022]

  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Setup Environment (Linux)
     if: matrix.os == 'ubuntu-22.04'
     run: |
      script/install-lnx.sh
#      sudo apt-get install -y libedit-dev libncursesw5-dev

   - name: Setup Environment (Raspberry)
     if: matrix.os == 'ubuntu-20.04'
     uses: pguyot/arm-runner-action@v2
     with:
      cpu: cortex-a53
      cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
      base_image: raspios_lite_arm64:latest
      image_additional_mb: 1024
      commands: |

#        kernel_version=`apt list --installed | grep raspberrypi-kernel | awk '{ print $2 }' | sed -e 's|1:||g'`
#        arch=`aptitude list --installed | grep raspberrypi-kernel | awk '{ print $3 }'`
#        wget -q http://archive.raspberrypi.org/debian/pool/main/r/raspberrypi-firmware/raspberrypi-kernel-headers_${kernel_version}_${arch}.deb
#        dpkg --install raspberrypi-kernel-headers_${kernel_version}_${arch}.deb
#        apt-get update -y --allow-releaseinfo-change
#        apt-get install --no-install-recommends -y libasound2-dev make gcc libc6-dev
#        for builddir in /lib/modules/*/build ; do
#         parentdir=`dirname ${builddir}`
#         kernelrelease=`basename ${parentdir}`
#         make KERNELRELEASE=${kernelrelease}
#         sudo make install KERNELRELEASE=${kernelrelease}
#         make clean KERNELRELEASE=${kernelrelease}
#         make test KERNELRELEASE=${kernelrelease}
#        done

   - name: Setup Environment (macOS)
     if: matrix.os == 'macos-12'
     uses: nttld/setup-ndk@v1
     with:
      ndk-version: r25b
      local-cache: true

   - name: Setup Environment (Windows)
     if: matrix.os == 'windows-2022'
     uses: ilammy/msvc-dev-cmd@v1
     with:
      arch: amd64

   - name: Build JE (Linux)
     if: matrix.os == 'ubuntu-22.04'
     env:
      CC: clang
      USE_SLEEF: 1
     run: script/buildga.sh linux

   - name: Build JE (Raspberry)
     if: matrix.os == 'ubuntu-20.04'
     uses: pguyot/arm-runner-action@v2
     with:
      cpu: cortex-a53
      cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
      base_image: raspios_lite_arm64:latest
      image_additional_mb: 1024
      env:
       CC: clang
       USE_SLEEF: 1
      commands: script/buildga.sh raspberry

   - name: Build JE (macOS)
     if: matrix.os == 'macos-12'
     env:
      CC: clang
      USE_SLEEF: 1
     run: script/buildga.sh darwin

   - name: Build JE (Windows)
     if: matrix.os == 'windows-2022'
     shell: cmd
     run: script\buildga.cmd

   - name: Test JE (Linux)
     if: matrix.os == 'ubuntu-22.04'
     run: script/testga.sh linux

   - name: Test JE (Raspberry64)
     if: matrix.os == 'ubuntu-20.04'
     run: script/testga.sh raspberry

   - name: Test JE (macOS)
     if: matrix.os == 'macos-12'
     run: script/testga.sh darwin

   - name: Test JE (Windows)
     if: matrix.os == 'windows-2022'
     shell: cmd
     run: script\testga.cmd

   - name: Compress Files (Linux)
     if: matrix.os == 'ubuntu-22.04'
     run: zip -r l64.zip j64

   - name: Compress Files (Raspberry64)
     if: matrix.os == 'ubuntu-20.04'
     run: zip -r rpi64.zip j64

   - name: Compress Files (macOS)
     if: matrix.os == 'macos-12'
     run: zip -r m64.zip j64

   - name: Compress Files (Windows)
     if: matrix.os == 'windows-2022'
     shell: pwsh
     run: Compress-Archive j64 w64.zip

   - name: Release JE (Linux)
     if: matrix.os == 'ubuntu-22.04'
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "l64.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Release JE (version)
     if: matrix.os == 'ubuntu-22.04'
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "version.txt"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Release JE (Raspberry64)
     if: matrix.os == 'ubuntu-20.04'
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "rpi64.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Release JE (macOS)
     if: matrix.os == 'macos-12'
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "m64.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Release JE (Windows)
     if: matrix.os == 'windows-2022'
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "w64.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (Linux)
     if: matrix.os == 'ubuntu-22.04'
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testlinux.txt

   - name: Copy Test (Raspberry64)
     if: matrix.os == 'ubuntu-20.04'
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testrpi.txt

   - name: Copy Test (macOS)
     if: matrix.os == 'macos-12'
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testdarwin.txt

   - name: Copy Test (Windows)
     if: matrix.os == 'windows-2022'
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testwin.txt

 tests:
  name: Test Results
  runs-on: ubuntu-22.04
  needs: jengine
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Get Test Results
     uses: actions/download-artifact@v2
     with:
       name: dist

   - name: Merge Test Results
     run: script/testgares.sh

   - name: Copy Tests to Build
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "tests.txt"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

 webhook:
  name: Run Webhook
  runs-on: ubuntu-22.04
  needs: tests
  steps:
   - name: update server
     uses: distributhor/workflow-webhook@v2
     env:
      webhook_url: ${{ secrets.WEBHOOK_URL }}
      webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
      data: '{ "id": "jebuild" }'
